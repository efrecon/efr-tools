#Preferred Directory Structure when working with efr-tools

= Introduction =

This wiki page describes the "preferred" directory structure when working with the efr-tools. This structure has a lot of historical background, but it has proven useful across the years.  It attempts to separate the common code from the code that is specific to applications, and to make sure most libraries end up in the common code so that they can be reused.


= Linking =

Symbolic links have existing on UNIX systems for years and when moving to Windows, there are no perfect equivalent. However, files ending with {{{.lnk}}} can be considered as links. The efr-tools contain a number of ways to read and understand those files.  The work is performed in a file called [http://code.google.com/p/efr-tools/source/browse/trunk/efr-lib/bootstrap.tcl bootstrap.tcl] and the code will attempt to do as follows:

  * Use [http://wiki.tcl.tk/1821 tcom] if it is present, since it is quick and the solution that works best. The code comes from the [http://wiki.tcl.tk/1844 wiki].
  * Use {{{cscript}}} as pointed out on the [http://wiki.tcl.tk/1844 wiki]. This has the disadvantage of using an external process, which can slowdown link reading if many links are to be read.
  * Try to extract the snippets as proposed in the same wiki page, which does not always work but sometimes is the last resort.

To create "symbolic links" on Windows, the wiki (again) proposes a number of solutions. efr-tools creates links using a separate process, originally found at [http://www.flexhex.com/docs/articles/hard-links.phtml#download flexhex].

Once ways exist to create and read links on Windows, organisation of data across directories can be more flexible.

= Organising =

== Common Code ==

I keep all common code in a directory called... {{{common}}}. Under that directory, I keep a copy of the {{{til}}}.  I check out separately the directory of the {{{til}}} using the following command.

{{{
svn checkout http://efr-tools.googlecode.com/svn/trunk/til/ til/
}}}

Under {{{common}}}, I have a directory called {{{tcldev}}} that contains all other common code. Under that directory, I create the following ones:

  * {{{bin}}} contains a number of (unreleased) useful scripts.
  * {{{contrib}}} contains a number of packages found here and there. I usually have one directory for each package to keep things tidy and clean.
  * {{{lib}}} is a checkout of the {{{efr-lib}}} directory, though renamed with {{{lib}}} instead (to make it consistent with the UNIX naming conventions). The checkout uses a command similar to the following one:

{{{
svn checkout http://efr-tools.googlecode.com/svn/trunk/efr-lib/ lib/
}}}

== Projects ==

Each project (the definition is vague!) finds its home in a directory that contains the name of the project. Under that directory, I usually keep the same directory structure, i.e.

  * The main script(s) for the project is(are) kept directly under the directory.
  * A {{{lib}}} directory contains all libraries that are necessary to run the project. The content of this directory contains either libraries that are project specific, each in its own directory or links into the directories of the [DirectoryStructure#Common_Code]. These links are created automatically as described below.
  * A {{{make}}} directory contains small scripts to create the links and to make the binaries, i.e. generate the Windows executable for those projects.

 